/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: FASTQC {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/qcs/fastqc" },
            mode: params.publish_dir_mode,
            pattern: "*.html"
        ]
        ext.prefix = { "${meta.id}_raw" }
    }

    withName: NANOPLOT_RAW {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/qcs/nanoplot_raw" },
            mode: params.publish_dir_mode,
            pattern: "*.{png,html,txt}"
        ]
        ext.prefix = 'raw'
    }

    withName: FILTLONG {
        publishDir = [
                path: { "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*.filtered.fastq.gz",
            ]
        ext.prefix = { "${meta.id}.filtered" }
        ext.args = [
            "--min_length ${params.filtlong_min_length}",
            "--keep_percent ${params.filtlong_keep_percent}",
            "--length_weight ${params.filtlong_length_weight}",
            "--target_bases ${params.filtlong_target_bases}"
        ].join(' ').trim()
    }

    withName: NANOPLOT_FILT {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/qcs/nanoplot_filt" },
            mode: params.publish_dir_mode,
            pattern: "*.{png,html,txt}"
        ]
        ext.prefix = 'filtered'
    }

    withName: RATATOSK {
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.fastq"
        ]
        ext.prefix = { "${meta.id}.corrected" }
        ext.args = [
            "--cores ${params.ratatosk_cores}"
        ].join(' ').trim()
    }

    withName: REPLACE_IUPAC {
        publishDir = [
                path: { "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*.corrected.fastq.gz",
            ]
        ext.prefix = { "${meta.id}.corrected" }
    }

    withName: NANOPLOT_CORR {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/qcs/nanoplot_corr" },
            mode: params.publish_dir_mode,
            pattern: "*.{png,html,txt}"
        ]
        ext.prefix = 'corrected'
    }

    withName: FLYE {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/assembly" },
            mode: params.publish_dir_mode,
            pattern: "*.{fasta,gfa,gv}.gz"
        ]
        ext.prefix = { "${meta.id}.assembled" }
        ext.args = [
            "--genome-size ${params.flye_genome_size}",
            "--iterations ${params.flye_iterations}",
            "--debug"
        ].join(' ').trim()
    }

    withName: MINIMAP2_ALIGN_ROUND_1 {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/polishing" },
            mode: params.publish_dir_mode,
            pattern: "*.paf"
        ]
        ext.prefix = { "${meta.id}.flye" }
    }

    withName: RACON_ROUND_1 {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/polishing" },
            mode: params.publish_dir_mode,
            pattern: "*.fasta.gz"
        ]
        ext.prefix = { "${meta.id}.flye.racon1" }
    }

    withName: MINIMAP2_ALIGN_ROUND_2 {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/polishing" },
            mode: params.publish_dir_mode,
            pattern: "*.paf"
        ]
        ext.prefix = { "${meta.id}.flye.racon1" }
    }

    withName: RACON_ROUND_2 {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/polishing" },
            mode: params.publish_dir_mode,
            pattern: "*.fasta.gz"
        ]
        ext.prefix = { "${meta.id}.flye.racon2" }
    }

    withName: 'BWA_INDEX|BWA_ALIGN|INDEX_BAM|PICARD_SORTSAM|INDEX_SORTED_BAM' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/polishing" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PILON {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/polishing" },
            mode: params.publish_dir_mode,
            pattern: "*.pilon.fasta"
        ]
        ext.args2 = [
            "-Xmx${params.pilon_max_mem}"
        ].join(' ').trim()
        ext.prefix = { "${meta.id}.flye.racon2.pilon" }
    }

    withName: SEQTK_SEQ {
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.fasta.gz"
        ]
        ext.args = [
            "-a"
        ].join(' ').trim()
        ext.prefix = { "${meta.id}.corrected" }
    }

    withName: MINIMAP2_PURGEDUPS {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/curation/purgedups" },
            mode: params.publish_dir_mode,
            pattern: "*.paf",
            saveAs: { "${meta.id}.paf" }
        ]
        ext.args = [
            "-xmap-ont"
        ].join(' ').trim()
    }

    withName: PURGEDUPS_PBCSTAT {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/curation/purgedups" },
            mode: params.publish_dir_mode,
            pattern: "*.PB.{base.cov,stat}"
        ]
    }

    withName: PURGEDUPS_CALCUTS {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/curation/purgedups" },
            mode: params.publish_dir_mode,
            pattern: "*.{calcuts.log,cutoffs}"
        ]
    }

    withName: PURGEDUPS_SPLITFA {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/curation/purgedups" },
            mode: params.publish_dir_mode,
            pattern: "*.split.fasta.gz"
        ]
    }

    withName: MINIMAP2_SPLITFA {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/curation/purgedups" },
            mode: params.publish_dir_mode,
            pattern: "*.paf",
            saveAs: { "${meta.id}.split.paf" }
        ]
        ext.args = [
            "-xasm5",
            "-DP"
        ].join(' ').trim()
    }

    withName: PURGEDUPS_PURGEDUPS {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/curation/purgedups" },
            mode: params.publish_dir_mode,
            pattern: "*.{dups.bed,purge_dups.log}"
        ]
    }

    withName: PURGEDUPS_GETSEQS {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/curation/purgedups" },
            mode: params.publish_dir_mode,
            pattern: "*.{hap,purged}.fa"
        ]
    }

    withName: RAGTAG_CORRECT {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/curation/scaffolds" },
            mode: params.publish_dir_mode,
            pattern: "*.fasta"
        ]
        ext.prefix = { "${meta.id}.flye.racon2.pilon.purged.corrected" }
    }

    withName: RAGTAG_SCAFFOLD {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/curation/scaffolds" },
            mode: params.publish_dir_mode,
            pattern: "*.scaffold.{fasta,stats,agp}"
        ]
        ext.prefix = { "${meta.id}.flye.racon2.pilon.purged.corrected.scaffold" }
    }

    withName: TGS_GAPCLOSER {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/curation/gapfilling" },
            mode: params.publish_dir_mode,
            pattern: "*.{fasta,gap_fill_detail}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = { "${meta.id}.flye.racon2.pilon.purged.corrected.scaffold.gapclosed" }
        ext.args = [
            "--thread ${params.tgs_gapcloser_threads}",
            "--ne",
            "--tgstype ${params.tgs_gapcloser_type}",
            "--minmap_arg \' ${params.tgs_gapcloser_minmap}\'"
        ].join(' ').trim()
    }

    withName: QUAST {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/qcs/quast" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BUSCO {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/qcs/busco" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MERYL_COUNT|MERYL_UNIONSUM|MERQURY' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/qcs/merqury" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}
